
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Chunk` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Chunk
 * 
 */
export type ChunkModel = runtime.Types.Result.DefaultSelection<Prisma.$ChunkPayload>

export type AggregateChunk = {
  _count: ChunkCountAggregateOutputType | null
  _avg: ChunkAvgAggregateOutputType | null
  _sum: ChunkSumAggregateOutputType | null
  _min: ChunkMinAggregateOutputType | null
  _max: ChunkMaxAggregateOutputType | null
}

export type ChunkAvgAggregateOutputType = {
  pageNumber: number | null
}

export type ChunkSumAggregateOutputType = {
  pageNumber: number | null
}

export type ChunkMinAggregateOutputType = {
  id: string | null
  pageNumber: number | null
  textContent: string | null
  documentId: string | null
  createdAt: Date | null
}

export type ChunkMaxAggregateOutputType = {
  id: string | null
  pageNumber: number | null
  textContent: string | null
  documentId: string | null
  createdAt: Date | null
}

export type ChunkCountAggregateOutputType = {
  id: number
  pageNumber: number
  textContent: number
  bboxList: number
  documentId: number
  createdAt: number
  _all: number
}


export type ChunkAvgAggregateInputType = {
  pageNumber?: true
}

export type ChunkSumAggregateInputType = {
  pageNumber?: true
}

export type ChunkMinAggregateInputType = {
  id?: true
  pageNumber?: true
  textContent?: true
  documentId?: true
  createdAt?: true
}

export type ChunkMaxAggregateInputType = {
  id?: true
  pageNumber?: true
  textContent?: true
  documentId?: true
  createdAt?: true
}

export type ChunkCountAggregateInputType = {
  id?: true
  pageNumber?: true
  textContent?: true
  bboxList?: true
  documentId?: true
  createdAt?: true
  _all?: true
}

export type ChunkAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Chunk to aggregate.
   */
  where?: Prisma.ChunkWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Chunks to fetch.
   */
  orderBy?: Prisma.ChunkOrderByWithRelationInput | Prisma.ChunkOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ChunkWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Chunks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Chunks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Chunks
  **/
  _count?: true | ChunkCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ChunkAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ChunkSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ChunkMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ChunkMaxAggregateInputType
}

export type GetChunkAggregateType<T extends ChunkAggregateArgs> = {
      [P in keyof T & keyof AggregateChunk]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateChunk[P]>
    : Prisma.GetScalarType<T[P], AggregateChunk[P]>
}




export type ChunkGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ChunkWhereInput
  orderBy?: Prisma.ChunkOrderByWithAggregationInput | Prisma.ChunkOrderByWithAggregationInput[]
  by: Prisma.ChunkScalarFieldEnum[] | Prisma.ChunkScalarFieldEnum
  having?: Prisma.ChunkScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ChunkCountAggregateInputType | true
  _avg?: ChunkAvgAggregateInputType
  _sum?: ChunkSumAggregateInputType
  _min?: ChunkMinAggregateInputType
  _max?: ChunkMaxAggregateInputType
}

export type ChunkGroupByOutputType = {
  id: string
  pageNumber: number
  textContent: string
  bboxList: runtime.JsonValue
  documentId: string
  createdAt: Date
  _count: ChunkCountAggregateOutputType | null
  _avg: ChunkAvgAggregateOutputType | null
  _sum: ChunkSumAggregateOutputType | null
  _min: ChunkMinAggregateOutputType | null
  _max: ChunkMaxAggregateOutputType | null
}

type GetChunkGroupByPayload<T extends ChunkGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ChunkGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ChunkGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ChunkGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ChunkGroupByOutputType[P]>
      }
    >
  >



export type ChunkWhereInput = {
  AND?: Prisma.ChunkWhereInput | Prisma.ChunkWhereInput[]
  OR?: Prisma.ChunkWhereInput[]
  NOT?: Prisma.ChunkWhereInput | Prisma.ChunkWhereInput[]
  id?: Prisma.StringFilter<"Chunk"> | string
  pageNumber?: Prisma.IntFilter<"Chunk"> | number
  textContent?: Prisma.StringFilter<"Chunk"> | string
  bboxList?: Prisma.JsonFilter<"Chunk">
  documentId?: Prisma.StringFilter<"Chunk"> | string
  createdAt?: Prisma.DateTimeFilter<"Chunk"> | Date | string
  document?: Prisma.XOR<Prisma.DocumentScalarRelationFilter, Prisma.DocumentWhereInput>
}

export type ChunkOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  pageNumber?: Prisma.SortOrder
  textContent?: Prisma.SortOrder
  bboxList?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  document?: Prisma.DocumentOrderByWithRelationInput
}

export type ChunkWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ChunkWhereInput | Prisma.ChunkWhereInput[]
  OR?: Prisma.ChunkWhereInput[]
  NOT?: Prisma.ChunkWhereInput | Prisma.ChunkWhereInput[]
  pageNumber?: Prisma.IntFilter<"Chunk"> | number
  textContent?: Prisma.StringFilter<"Chunk"> | string
  bboxList?: Prisma.JsonFilter<"Chunk">
  documentId?: Prisma.StringFilter<"Chunk"> | string
  createdAt?: Prisma.DateTimeFilter<"Chunk"> | Date | string
  document?: Prisma.XOR<Prisma.DocumentScalarRelationFilter, Prisma.DocumentWhereInput>
}, "id">

export type ChunkOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  pageNumber?: Prisma.SortOrder
  textContent?: Prisma.SortOrder
  bboxList?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.ChunkCountOrderByAggregateInput
  _avg?: Prisma.ChunkAvgOrderByAggregateInput
  _max?: Prisma.ChunkMaxOrderByAggregateInput
  _min?: Prisma.ChunkMinOrderByAggregateInput
  _sum?: Prisma.ChunkSumOrderByAggregateInput
}

export type ChunkScalarWhereWithAggregatesInput = {
  AND?: Prisma.ChunkScalarWhereWithAggregatesInput | Prisma.ChunkScalarWhereWithAggregatesInput[]
  OR?: Prisma.ChunkScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ChunkScalarWhereWithAggregatesInput | Prisma.ChunkScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Chunk"> | string
  pageNumber?: Prisma.IntWithAggregatesFilter<"Chunk"> | number
  textContent?: Prisma.StringWithAggregatesFilter<"Chunk"> | string
  bboxList?: Prisma.JsonWithAggregatesFilter<"Chunk">
  documentId?: Prisma.StringWithAggregatesFilter<"Chunk"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Chunk"> | Date | string
}

export type ChunkCreateInput = {
  id?: string
  pageNumber: number
  textContent: string
  bboxList: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  document: Prisma.DocumentCreateNestedOneWithoutChunksInput
}

export type ChunkUncheckedCreateInput = {
  id?: string
  pageNumber: number
  textContent: string
  bboxList: Prisma.JsonNullValueInput | runtime.InputJsonValue
  documentId: string
  createdAt?: Date | string
}

export type ChunkUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  pageNumber?: Prisma.IntFieldUpdateOperationsInput | number
  textContent?: Prisma.StringFieldUpdateOperationsInput | string
  bboxList?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  document?: Prisma.DocumentUpdateOneRequiredWithoutChunksNestedInput
}

export type ChunkUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  pageNumber?: Prisma.IntFieldUpdateOperationsInput | number
  textContent?: Prisma.StringFieldUpdateOperationsInput | string
  bboxList?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  documentId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChunkCreateManyInput = {
  id?: string
  pageNumber: number
  textContent: string
  bboxList: Prisma.JsonNullValueInput | runtime.InputJsonValue
  documentId: string
  createdAt?: Date | string
}

export type ChunkUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  pageNumber?: Prisma.IntFieldUpdateOperationsInput | number
  textContent?: Prisma.StringFieldUpdateOperationsInput | string
  bboxList?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChunkUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  pageNumber?: Prisma.IntFieldUpdateOperationsInput | number
  textContent?: Prisma.StringFieldUpdateOperationsInput | string
  bboxList?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  documentId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChunkListRelationFilter = {
  every?: Prisma.ChunkWhereInput
  some?: Prisma.ChunkWhereInput
  none?: Prisma.ChunkWhereInput
}

export type ChunkOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ChunkCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  pageNumber?: Prisma.SortOrder
  textContent?: Prisma.SortOrder
  bboxList?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ChunkAvgOrderByAggregateInput = {
  pageNumber?: Prisma.SortOrder
}

export type ChunkMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  pageNumber?: Prisma.SortOrder
  textContent?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ChunkMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  pageNumber?: Prisma.SortOrder
  textContent?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ChunkSumOrderByAggregateInput = {
  pageNumber?: Prisma.SortOrder
}

export type ChunkCreateNestedManyWithoutDocumentInput = {
  create?: Prisma.XOR<Prisma.ChunkCreateWithoutDocumentInput, Prisma.ChunkUncheckedCreateWithoutDocumentInput> | Prisma.ChunkCreateWithoutDocumentInput[] | Prisma.ChunkUncheckedCreateWithoutDocumentInput[]
  connectOrCreate?: Prisma.ChunkCreateOrConnectWithoutDocumentInput | Prisma.ChunkCreateOrConnectWithoutDocumentInput[]
  createMany?: Prisma.ChunkCreateManyDocumentInputEnvelope
  connect?: Prisma.ChunkWhereUniqueInput | Prisma.ChunkWhereUniqueInput[]
}

export type ChunkUncheckedCreateNestedManyWithoutDocumentInput = {
  create?: Prisma.XOR<Prisma.ChunkCreateWithoutDocumentInput, Prisma.ChunkUncheckedCreateWithoutDocumentInput> | Prisma.ChunkCreateWithoutDocumentInput[] | Prisma.ChunkUncheckedCreateWithoutDocumentInput[]
  connectOrCreate?: Prisma.ChunkCreateOrConnectWithoutDocumentInput | Prisma.ChunkCreateOrConnectWithoutDocumentInput[]
  createMany?: Prisma.ChunkCreateManyDocumentInputEnvelope
  connect?: Prisma.ChunkWhereUniqueInput | Prisma.ChunkWhereUniqueInput[]
}

export type ChunkUpdateManyWithoutDocumentNestedInput = {
  create?: Prisma.XOR<Prisma.ChunkCreateWithoutDocumentInput, Prisma.ChunkUncheckedCreateWithoutDocumentInput> | Prisma.ChunkCreateWithoutDocumentInput[] | Prisma.ChunkUncheckedCreateWithoutDocumentInput[]
  connectOrCreate?: Prisma.ChunkCreateOrConnectWithoutDocumentInput | Prisma.ChunkCreateOrConnectWithoutDocumentInput[]
  upsert?: Prisma.ChunkUpsertWithWhereUniqueWithoutDocumentInput | Prisma.ChunkUpsertWithWhereUniqueWithoutDocumentInput[]
  createMany?: Prisma.ChunkCreateManyDocumentInputEnvelope
  set?: Prisma.ChunkWhereUniqueInput | Prisma.ChunkWhereUniqueInput[]
  disconnect?: Prisma.ChunkWhereUniqueInput | Prisma.ChunkWhereUniqueInput[]
  delete?: Prisma.ChunkWhereUniqueInput | Prisma.ChunkWhereUniqueInput[]
  connect?: Prisma.ChunkWhereUniqueInput | Prisma.ChunkWhereUniqueInput[]
  update?: Prisma.ChunkUpdateWithWhereUniqueWithoutDocumentInput | Prisma.ChunkUpdateWithWhereUniqueWithoutDocumentInput[]
  updateMany?: Prisma.ChunkUpdateManyWithWhereWithoutDocumentInput | Prisma.ChunkUpdateManyWithWhereWithoutDocumentInput[]
  deleteMany?: Prisma.ChunkScalarWhereInput | Prisma.ChunkScalarWhereInput[]
}

export type ChunkUncheckedUpdateManyWithoutDocumentNestedInput = {
  create?: Prisma.XOR<Prisma.ChunkCreateWithoutDocumentInput, Prisma.ChunkUncheckedCreateWithoutDocumentInput> | Prisma.ChunkCreateWithoutDocumentInput[] | Prisma.ChunkUncheckedCreateWithoutDocumentInput[]
  connectOrCreate?: Prisma.ChunkCreateOrConnectWithoutDocumentInput | Prisma.ChunkCreateOrConnectWithoutDocumentInput[]
  upsert?: Prisma.ChunkUpsertWithWhereUniqueWithoutDocumentInput | Prisma.ChunkUpsertWithWhereUniqueWithoutDocumentInput[]
  createMany?: Prisma.ChunkCreateManyDocumentInputEnvelope
  set?: Prisma.ChunkWhereUniqueInput | Prisma.ChunkWhereUniqueInput[]
  disconnect?: Prisma.ChunkWhereUniqueInput | Prisma.ChunkWhereUniqueInput[]
  delete?: Prisma.ChunkWhereUniqueInput | Prisma.ChunkWhereUniqueInput[]
  connect?: Prisma.ChunkWhereUniqueInput | Prisma.ChunkWhereUniqueInput[]
  update?: Prisma.ChunkUpdateWithWhereUniqueWithoutDocumentInput | Prisma.ChunkUpdateWithWhereUniqueWithoutDocumentInput[]
  updateMany?: Prisma.ChunkUpdateManyWithWhereWithoutDocumentInput | Prisma.ChunkUpdateManyWithWhereWithoutDocumentInput[]
  deleteMany?: Prisma.ChunkScalarWhereInput | Prisma.ChunkScalarWhereInput[]
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type ChunkCreateWithoutDocumentInput = {
  id?: string
  pageNumber: number
  textContent: string
  bboxList: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
}

export type ChunkUncheckedCreateWithoutDocumentInput = {
  id?: string
  pageNumber: number
  textContent: string
  bboxList: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
}

export type ChunkCreateOrConnectWithoutDocumentInput = {
  where: Prisma.ChunkWhereUniqueInput
  create: Prisma.XOR<Prisma.ChunkCreateWithoutDocumentInput, Prisma.ChunkUncheckedCreateWithoutDocumentInput>
}

export type ChunkCreateManyDocumentInputEnvelope = {
  data: Prisma.ChunkCreateManyDocumentInput | Prisma.ChunkCreateManyDocumentInput[]
  skipDuplicates?: boolean
}

export type ChunkUpsertWithWhereUniqueWithoutDocumentInput = {
  where: Prisma.ChunkWhereUniqueInput
  update: Prisma.XOR<Prisma.ChunkUpdateWithoutDocumentInput, Prisma.ChunkUncheckedUpdateWithoutDocumentInput>
  create: Prisma.XOR<Prisma.ChunkCreateWithoutDocumentInput, Prisma.ChunkUncheckedCreateWithoutDocumentInput>
}

export type ChunkUpdateWithWhereUniqueWithoutDocumentInput = {
  where: Prisma.ChunkWhereUniqueInput
  data: Prisma.XOR<Prisma.ChunkUpdateWithoutDocumentInput, Prisma.ChunkUncheckedUpdateWithoutDocumentInput>
}

export type ChunkUpdateManyWithWhereWithoutDocumentInput = {
  where: Prisma.ChunkScalarWhereInput
  data: Prisma.XOR<Prisma.ChunkUpdateManyMutationInput, Prisma.ChunkUncheckedUpdateManyWithoutDocumentInput>
}

export type ChunkScalarWhereInput = {
  AND?: Prisma.ChunkScalarWhereInput | Prisma.ChunkScalarWhereInput[]
  OR?: Prisma.ChunkScalarWhereInput[]
  NOT?: Prisma.ChunkScalarWhereInput | Prisma.ChunkScalarWhereInput[]
  id?: Prisma.StringFilter<"Chunk"> | string
  pageNumber?: Prisma.IntFilter<"Chunk"> | number
  textContent?: Prisma.StringFilter<"Chunk"> | string
  bboxList?: Prisma.JsonFilter<"Chunk">
  documentId?: Prisma.StringFilter<"Chunk"> | string
  createdAt?: Prisma.DateTimeFilter<"Chunk"> | Date | string
}

export type ChunkCreateManyDocumentInput = {
  id?: string
  pageNumber: number
  textContent: string
  bboxList: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
}

export type ChunkUpdateWithoutDocumentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  pageNumber?: Prisma.IntFieldUpdateOperationsInput | number
  textContent?: Prisma.StringFieldUpdateOperationsInput | string
  bboxList?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChunkUncheckedUpdateWithoutDocumentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  pageNumber?: Prisma.IntFieldUpdateOperationsInput | number
  textContent?: Prisma.StringFieldUpdateOperationsInput | string
  bboxList?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChunkUncheckedUpdateManyWithoutDocumentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  pageNumber?: Prisma.IntFieldUpdateOperationsInput | number
  textContent?: Prisma.StringFieldUpdateOperationsInput | string
  bboxList?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ChunkSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  pageNumber?: boolean
  textContent?: boolean
  bboxList?: boolean
  documentId?: boolean
  createdAt?: boolean
  document?: boolean | Prisma.DocumentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["chunk"]>

export type ChunkSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  pageNumber?: boolean
  textContent?: boolean
  bboxList?: boolean
  documentId?: boolean
  createdAt?: boolean
  document?: boolean | Prisma.DocumentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["chunk"]>

export type ChunkSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  pageNumber?: boolean
  textContent?: boolean
  bboxList?: boolean
  documentId?: boolean
  createdAt?: boolean
  document?: boolean | Prisma.DocumentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["chunk"]>

export type ChunkSelectScalar = {
  id?: boolean
  pageNumber?: boolean
  textContent?: boolean
  bboxList?: boolean
  documentId?: boolean
  createdAt?: boolean
}

export type ChunkOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "pageNumber" | "textContent" | "bboxList" | "documentId" | "createdAt", ExtArgs["result"]["chunk"]>
export type ChunkInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  document?: boolean | Prisma.DocumentDefaultArgs<ExtArgs>
}
export type ChunkIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  document?: boolean | Prisma.DocumentDefaultArgs<ExtArgs>
}
export type ChunkIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  document?: boolean | Prisma.DocumentDefaultArgs<ExtArgs>
}

export type $ChunkPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Chunk"
  objects: {
    document: Prisma.$DocumentPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    pageNumber: number
    textContent: string
    bboxList: runtime.JsonValue
    documentId: string
    createdAt: Date
  }, ExtArgs["result"]["chunk"]>
  composites: {}
}

export type ChunkGetPayload<S extends boolean | null | undefined | ChunkDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ChunkPayload, S>

export type ChunkCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ChunkFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ChunkCountAggregateInputType | true
  }

export interface ChunkDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Chunk'], meta: { name: 'Chunk' } }
  /**
   * Find zero or one Chunk that matches the filter.
   * @param {ChunkFindUniqueArgs} args - Arguments to find a Chunk
   * @example
   * // Get one Chunk
   * const chunk = await prisma.chunk.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ChunkFindUniqueArgs>(args: Prisma.SelectSubset<T, ChunkFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ChunkClient<runtime.Types.Result.GetResult<Prisma.$ChunkPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Chunk that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ChunkFindUniqueOrThrowArgs} args - Arguments to find a Chunk
   * @example
   * // Get one Chunk
   * const chunk = await prisma.chunk.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ChunkFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ChunkFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ChunkClient<runtime.Types.Result.GetResult<Prisma.$ChunkPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Chunk that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChunkFindFirstArgs} args - Arguments to find a Chunk
   * @example
   * // Get one Chunk
   * const chunk = await prisma.chunk.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ChunkFindFirstArgs>(args?: Prisma.SelectSubset<T, ChunkFindFirstArgs<ExtArgs>>): Prisma.Prisma__ChunkClient<runtime.Types.Result.GetResult<Prisma.$ChunkPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Chunk that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChunkFindFirstOrThrowArgs} args - Arguments to find a Chunk
   * @example
   * // Get one Chunk
   * const chunk = await prisma.chunk.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ChunkFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ChunkFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ChunkClient<runtime.Types.Result.GetResult<Prisma.$ChunkPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Chunks that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChunkFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Chunks
   * const chunks = await prisma.chunk.findMany()
   * 
   * // Get first 10 Chunks
   * const chunks = await prisma.chunk.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const chunkWithIdOnly = await prisma.chunk.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ChunkFindManyArgs>(args?: Prisma.SelectSubset<T, ChunkFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChunkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Chunk.
   * @param {ChunkCreateArgs} args - Arguments to create a Chunk.
   * @example
   * // Create one Chunk
   * const Chunk = await prisma.chunk.create({
   *   data: {
   *     // ... data to create a Chunk
   *   }
   * })
   * 
   */
  create<T extends ChunkCreateArgs>(args: Prisma.SelectSubset<T, ChunkCreateArgs<ExtArgs>>): Prisma.Prisma__ChunkClient<runtime.Types.Result.GetResult<Prisma.$ChunkPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Chunks.
   * @param {ChunkCreateManyArgs} args - Arguments to create many Chunks.
   * @example
   * // Create many Chunks
   * const chunk = await prisma.chunk.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ChunkCreateManyArgs>(args?: Prisma.SelectSubset<T, ChunkCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Chunks and returns the data saved in the database.
   * @param {ChunkCreateManyAndReturnArgs} args - Arguments to create many Chunks.
   * @example
   * // Create many Chunks
   * const chunk = await prisma.chunk.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Chunks and only return the `id`
   * const chunkWithIdOnly = await prisma.chunk.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ChunkCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ChunkCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChunkPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Chunk.
   * @param {ChunkDeleteArgs} args - Arguments to delete one Chunk.
   * @example
   * // Delete one Chunk
   * const Chunk = await prisma.chunk.delete({
   *   where: {
   *     // ... filter to delete one Chunk
   *   }
   * })
   * 
   */
  delete<T extends ChunkDeleteArgs>(args: Prisma.SelectSubset<T, ChunkDeleteArgs<ExtArgs>>): Prisma.Prisma__ChunkClient<runtime.Types.Result.GetResult<Prisma.$ChunkPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Chunk.
   * @param {ChunkUpdateArgs} args - Arguments to update one Chunk.
   * @example
   * // Update one Chunk
   * const chunk = await prisma.chunk.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ChunkUpdateArgs>(args: Prisma.SelectSubset<T, ChunkUpdateArgs<ExtArgs>>): Prisma.Prisma__ChunkClient<runtime.Types.Result.GetResult<Prisma.$ChunkPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Chunks.
   * @param {ChunkDeleteManyArgs} args - Arguments to filter Chunks to delete.
   * @example
   * // Delete a few Chunks
   * const { count } = await prisma.chunk.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ChunkDeleteManyArgs>(args?: Prisma.SelectSubset<T, ChunkDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Chunks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChunkUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Chunks
   * const chunk = await prisma.chunk.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ChunkUpdateManyArgs>(args: Prisma.SelectSubset<T, ChunkUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Chunks and returns the data updated in the database.
   * @param {ChunkUpdateManyAndReturnArgs} args - Arguments to update many Chunks.
   * @example
   * // Update many Chunks
   * const chunk = await prisma.chunk.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Chunks and only return the `id`
   * const chunkWithIdOnly = await prisma.chunk.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ChunkUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ChunkUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChunkPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Chunk.
   * @param {ChunkUpsertArgs} args - Arguments to update or create a Chunk.
   * @example
   * // Update or create a Chunk
   * const chunk = await prisma.chunk.upsert({
   *   create: {
   *     // ... data to create a Chunk
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Chunk we want to update
   *   }
   * })
   */
  upsert<T extends ChunkUpsertArgs>(args: Prisma.SelectSubset<T, ChunkUpsertArgs<ExtArgs>>): Prisma.Prisma__ChunkClient<runtime.Types.Result.GetResult<Prisma.$ChunkPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Chunks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChunkCountArgs} args - Arguments to filter Chunks to count.
   * @example
   * // Count the number of Chunks
   * const count = await prisma.chunk.count({
   *   where: {
   *     // ... the filter for the Chunks we want to count
   *   }
   * })
  **/
  count<T extends ChunkCountArgs>(
    args?: Prisma.Subset<T, ChunkCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ChunkCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Chunk.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChunkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ChunkAggregateArgs>(args: Prisma.Subset<T, ChunkAggregateArgs>): Prisma.PrismaPromise<GetChunkAggregateType<T>>

  /**
   * Group by Chunk.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChunkGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ChunkGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ChunkGroupByArgs['orderBy'] }
      : { orderBy?: ChunkGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ChunkGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChunkGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Chunk model
 */
readonly fields: ChunkFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Chunk.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ChunkClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  document<T extends Prisma.DocumentDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DocumentDefaultArgs<ExtArgs>>): Prisma.Prisma__DocumentClient<runtime.Types.Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Chunk model
 */
export interface ChunkFieldRefs {
  readonly id: Prisma.FieldRef<"Chunk", 'String'>
  readonly pageNumber: Prisma.FieldRef<"Chunk", 'Int'>
  readonly textContent: Prisma.FieldRef<"Chunk", 'String'>
  readonly bboxList: Prisma.FieldRef<"Chunk", 'Json'>
  readonly documentId: Prisma.FieldRef<"Chunk", 'String'>
  readonly createdAt: Prisma.FieldRef<"Chunk", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Chunk findUnique
 */
export type ChunkFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chunk
   */
  select?: Prisma.ChunkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chunk
   */
  omit?: Prisma.ChunkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChunkInclude<ExtArgs> | null
  /**
   * Filter, which Chunk to fetch.
   */
  where: Prisma.ChunkWhereUniqueInput
}

/**
 * Chunk findUniqueOrThrow
 */
export type ChunkFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chunk
   */
  select?: Prisma.ChunkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chunk
   */
  omit?: Prisma.ChunkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChunkInclude<ExtArgs> | null
  /**
   * Filter, which Chunk to fetch.
   */
  where: Prisma.ChunkWhereUniqueInput
}

/**
 * Chunk findFirst
 */
export type ChunkFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chunk
   */
  select?: Prisma.ChunkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chunk
   */
  omit?: Prisma.ChunkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChunkInclude<ExtArgs> | null
  /**
   * Filter, which Chunk to fetch.
   */
  where?: Prisma.ChunkWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Chunks to fetch.
   */
  orderBy?: Prisma.ChunkOrderByWithRelationInput | Prisma.ChunkOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Chunks.
   */
  cursor?: Prisma.ChunkWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Chunks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Chunks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Chunks.
   */
  distinct?: Prisma.ChunkScalarFieldEnum | Prisma.ChunkScalarFieldEnum[]
}

/**
 * Chunk findFirstOrThrow
 */
export type ChunkFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chunk
   */
  select?: Prisma.ChunkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chunk
   */
  omit?: Prisma.ChunkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChunkInclude<ExtArgs> | null
  /**
   * Filter, which Chunk to fetch.
   */
  where?: Prisma.ChunkWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Chunks to fetch.
   */
  orderBy?: Prisma.ChunkOrderByWithRelationInput | Prisma.ChunkOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Chunks.
   */
  cursor?: Prisma.ChunkWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Chunks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Chunks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Chunks.
   */
  distinct?: Prisma.ChunkScalarFieldEnum | Prisma.ChunkScalarFieldEnum[]
}

/**
 * Chunk findMany
 */
export type ChunkFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chunk
   */
  select?: Prisma.ChunkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chunk
   */
  omit?: Prisma.ChunkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChunkInclude<ExtArgs> | null
  /**
   * Filter, which Chunks to fetch.
   */
  where?: Prisma.ChunkWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Chunks to fetch.
   */
  orderBy?: Prisma.ChunkOrderByWithRelationInput | Prisma.ChunkOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Chunks.
   */
  cursor?: Prisma.ChunkWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Chunks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Chunks.
   */
  skip?: number
  distinct?: Prisma.ChunkScalarFieldEnum | Prisma.ChunkScalarFieldEnum[]
}

/**
 * Chunk create
 */
export type ChunkCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chunk
   */
  select?: Prisma.ChunkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chunk
   */
  omit?: Prisma.ChunkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChunkInclude<ExtArgs> | null
  /**
   * The data needed to create a Chunk.
   */
  data: Prisma.XOR<Prisma.ChunkCreateInput, Prisma.ChunkUncheckedCreateInput>
}

/**
 * Chunk createMany
 */
export type ChunkCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Chunks.
   */
  data: Prisma.ChunkCreateManyInput | Prisma.ChunkCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Chunk createManyAndReturn
 */
export type ChunkCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chunk
   */
  select?: Prisma.ChunkSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Chunk
   */
  omit?: Prisma.ChunkOmit<ExtArgs> | null
  /**
   * The data used to create many Chunks.
   */
  data: Prisma.ChunkCreateManyInput | Prisma.ChunkCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChunkIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Chunk update
 */
export type ChunkUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chunk
   */
  select?: Prisma.ChunkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chunk
   */
  omit?: Prisma.ChunkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChunkInclude<ExtArgs> | null
  /**
   * The data needed to update a Chunk.
   */
  data: Prisma.XOR<Prisma.ChunkUpdateInput, Prisma.ChunkUncheckedUpdateInput>
  /**
   * Choose, which Chunk to update.
   */
  where: Prisma.ChunkWhereUniqueInput
}

/**
 * Chunk updateMany
 */
export type ChunkUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Chunks.
   */
  data: Prisma.XOR<Prisma.ChunkUpdateManyMutationInput, Prisma.ChunkUncheckedUpdateManyInput>
  /**
   * Filter which Chunks to update
   */
  where?: Prisma.ChunkWhereInput
  /**
   * Limit how many Chunks to update.
   */
  limit?: number
}

/**
 * Chunk updateManyAndReturn
 */
export type ChunkUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chunk
   */
  select?: Prisma.ChunkSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Chunk
   */
  omit?: Prisma.ChunkOmit<ExtArgs> | null
  /**
   * The data used to update Chunks.
   */
  data: Prisma.XOR<Prisma.ChunkUpdateManyMutationInput, Prisma.ChunkUncheckedUpdateManyInput>
  /**
   * Filter which Chunks to update
   */
  where?: Prisma.ChunkWhereInput
  /**
   * Limit how many Chunks to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChunkIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Chunk upsert
 */
export type ChunkUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chunk
   */
  select?: Prisma.ChunkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chunk
   */
  omit?: Prisma.ChunkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChunkInclude<ExtArgs> | null
  /**
   * The filter to search for the Chunk to update in case it exists.
   */
  where: Prisma.ChunkWhereUniqueInput
  /**
   * In case the Chunk found by the `where` argument doesn't exist, create a new Chunk with this data.
   */
  create: Prisma.XOR<Prisma.ChunkCreateInput, Prisma.ChunkUncheckedCreateInput>
  /**
   * In case the Chunk was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ChunkUpdateInput, Prisma.ChunkUncheckedUpdateInput>
}

/**
 * Chunk delete
 */
export type ChunkDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chunk
   */
  select?: Prisma.ChunkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chunk
   */
  omit?: Prisma.ChunkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChunkInclude<ExtArgs> | null
  /**
   * Filter which Chunk to delete.
   */
  where: Prisma.ChunkWhereUniqueInput
}

/**
 * Chunk deleteMany
 */
export type ChunkDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Chunks to delete
   */
  where?: Prisma.ChunkWhereInput
  /**
   * Limit how many Chunks to delete.
   */
  limit?: number
}

/**
 * Chunk without action
 */
export type ChunkDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chunk
   */
  select?: Prisma.ChunkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chunk
   */
  omit?: Prisma.ChunkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChunkInclude<ExtArgs> | null
}
